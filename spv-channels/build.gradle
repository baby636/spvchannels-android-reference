plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'maven-publish'
    id 'org.jetbrains.dokka' version '1.4.30'
}

ext {
    version = '1.0.0'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    final retrofit_version = '2.9.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:1.3.2"

    // Lifecycle version
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'

    // Moshi
    implementation "com.squareup.moshi:moshi:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // LibSodium
    implementation "com.goterl.lazycode:lazysodium-android:4.3.2@aar"
    implementation 'net.java.dev.jna:jna:5.7.0@aar'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:26.6.0')
    implementation 'com.google.firebase:firebase-messaging-ktx'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.6.28'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier = 'javadoc'
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives sourcesJar, javadocJar
}

afterEvaluate {
    def outputAarDir = rootProject.file(project.name + '/build/outputs/aar/')
    def outputAarUnzippedDir = rootProject.file(project.name + '/build/outputs/aar/unzipped')
    def aarReleaseFile = rootProject.file(project.name + '/build/outputs/aar/' + project.name + '-release.aar')

    task unzipAar(type: Copy) {
        from zipTree(aarReleaseFile)
        into outputAarUnzippedDir
    }

    task addLicenseFile(type: Copy, dependsOn: 'unzipAar') {
        from "${rootDir}/LICENSE"
        into "$outputAarUnzippedDir/META-INF"
    }

    task reZipAar(type: Zip, dependsOn: 'addLicenseFile') {
        from outputAarUnzippedDir
        include '*'
        include '*/**'
        archiveName project.name + '-release.aar'
        destinationDir(outputAarDir)
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'io.bitcoinsv'
                artifactId 'spvchannels-android'
                version project.ext.version

                artifact bundleReleaseAar
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    asNode().appendNode('name', 'SPV Channels Android SDK Reference Implementation')
                    asNode().appendNode('description', 'A mobile SDK to facilitate Simplified Payment Verification (SPV) development on the Android platform.')
                    asNode().appendNode('url', 'https://github.com/bitcoin-sv/spvchannels-android-reference')

                    asNode().appendNode('licenses')
                            .appendNode('license')
                            .appendNode('name', 'Open BSV License')
                            .parent()
                            .appendNode('url', 'https://github.com/bitcoin-sv/spvchannels-android-reference/blob/master/LICENSE')

                    asNode().appendNode('developers')
                            .appendNode('developer')
                            .appendNode('organization', 'nChain')
                            .parent()
                            .appendNode('organizationUrl', 'https://nchain.com/')
                            .parent()
                            .appendNode('name', 'Zan Skamljic')
                            .parent()
                            .appendNode('email', 'someemail')

                    asNode().appendNode('scm')
                            .appendNode('connection', 'scm:git:https://github.com/bitcoin-sv/spvchannels-android-reference.git')
                            .parent()
                            .appendNode('developerConnection', 'scm:git:https://github.com/bitcoin-sv/spvchannels-android-reference.git')
                            .parent()
                            .appendNode('url', 'https://github.com/bitcoin-sv/spvchannels-android-reference')

                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if (it.group != null && (it.name != null || "unspecified" == it.name) && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }

    bundleReleaseAar.finalizedBy(reZipAar)
}